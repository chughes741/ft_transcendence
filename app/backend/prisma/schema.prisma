generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////
//     User     //
//////////////////

model User {
  id String @id @default(uuid())

  username String @unique // To prevent duplicates in the DB
  hash     String

  avatar String  @default("default_avatar.png")
  email  String? @unique // To prevent duplicates in the DB

  firstName String?
  lastName  String?
  status    UserStatus @default(OFFLINE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages        Message[]
  chatOwnerships  ChatRoom[]
  chatMemberships ChatMember[]
  games           Player[]

  @@map("users")
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
}

//////////////////
//     Chat     //
//////////////////

model ChatRoom {
  id Int @id @default(autoincrement())

  name String @unique

  status ChatRoomStatus

  password String?

  createdBy String?
  owner     User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   ChatMember[]
  messages  Message[]

  @@map("chatRooms")
}

enum ChatRoomStatus {
  DIALOGUE
  PUBLIC
  PRIVATE
  PASSWORD
}

model Message {
  id Int @id @default(autoincrement())

  content String

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  roomId Int
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model ChatMember {
  id Int @id @default(autoincrement())

  memberId String
  member   User   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  roomId Int
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  status ChatMemberStatus
  rank   ChatMemberRank

  endOfBan  DateTime?
  endOfMute DateTime?

  @@unique([memberId, roomId])
  @@map("chatMembers")
}

enum ChatMemberRank {
  USER
  ADMIN
  OWNER
}

enum ChatMemberStatus {
  OK
  BLOCKED
  MUTED
  BANNED
}

//////////////////
//     Game     //
//////////////////

model Match {
  id Int @id @default(autoincrement())

  roomId String?

  status MatchStatus

  startedAt DateTime  @default(now())
  endedAt   DateTime?
  players   Player[]
}

enum MatchStatus {
  ACTIVE
  ENDED
}

model Player {
  id Int @id @default(autoincrement())

  memberId String? // So that account deletion doesn't break other users' scores
  member   User?   @relation(fields: [memberId], references: [id], onDelete: SetNull)

  matchId Int
  match   Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  score      Int
  sidePlayed PlayerSide
}

enum PlayerSide {
  SIDE1
  SIDE2
}
