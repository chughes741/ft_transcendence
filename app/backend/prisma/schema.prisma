generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//////////////////
//     User     //
//////////////////

model User {
  id String @id @default(uuid())

  username String @unique // To prevent duplicates in the DB

  avatar String @default("default_avatar.png")
  email  String @unique // To prevent duplicates in the DB

  firstName String?
  lastName  String?
  status    UserStatus @default(OFFLINE)
  // is2faEnabled Boolean    @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages        Message[]
  chatOwnerships  ChatRoom[]
  chatMemberships ChatMember[]
  player1         Match[]       @relation("player1")
  player2         Match[]       @relation("player2")
  friends         Friend[]      @relation("UserFriends")
  friendsOf       Friend[]      @relation("FriendOfUser")
  blockedUsers    BlockedUser[] @relation("BlockedUsers")
  blockedBy       BlockedUser[] @relation("UserBlockedBy")

  @@map("users")
}

model Friend {
  id Int @id @default(autoincrement())

  userId String
  user   User   @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)

  friendId String
  friend   User   @relation("FriendOfUser", fields: [friendId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, friendId])
  @@map("friends")
}

model BlockedUser {
  id Int @id @default(autoincrement())

  blockerId String
  blocker   User   @relation("BlockedUsers", fields: [blockerId], references: [id], onDelete: Cascade)

  blockedUserId String
  blocked       User   @relation("UserBlockedBy", fields: [blockedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([blockerId, blockedUserId])
  @@map("blockedUsers")
}

enum UserStatus {
  ONLINE
  OFFLINE
  AWAY
}

//////////////////
//     Chat     //
//////////////////

model ChatRoom {
  id Int @id @default(autoincrement())

  name String @unique

  status ChatRoomStatus

  password String?

  createdBy String?
  owner     User?   @relation(fields: [createdBy], references: [id], onDelete: SetNull)

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  members   ChatMember[]
  messages  Message[]

  @@map("chatRooms")
}

enum ChatRoomStatus {
  DIALOGUE
  PUBLIC
  PRIVATE
  PASSWORD
}

model Message {
  id Int @id @default(autoincrement())

  content String

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  roomId Int
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model ChatMember {
  id Int @id @default(autoincrement())

  memberId String
  member   User   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  roomId Int
  room   ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)

  status ChatMemberStatus
  rank   ChatMemberRank

  endOfBan  DateTime?
  endOfMute DateTime?

  @@unique([memberId, roomId])
  @@map("chatMembers")
}

enum ChatMemberRank {
  USER
  ADMIN
  OWNER
}

enum ChatMemberStatus {
  OK
  MUTED
  BANNED
}

//////////////////
//     Game     //
//////////////////

model Match {
  id Int @id @default(autoincrement())

  roomId String?

  gameType GameType

  player1Id String
  player1   User   @relation(name: "player1", fields: [player1Id], references: [id], onDelete: Cascade)
  player2Id String
  player2   User   @relation(name: "player2", fields: [player2Id], references: [id], onDelete: Cascade)

  scorePlayer1 Int
  scorePlayer2 Int

  timestamp DateTime

  @@map("matches")
}

enum GameType {
  RANKED
  UNRANKED
}
